@page "/watchlist"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net.Http.Json
@using Newtonsoft.Json
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject HttpClient Http
<h3>Watchlist</h3>

<SfGrid DataSource="@DataSource" AllowPaging="true" AllowSorting="true" AllowFiltering="true">
    <GridPageSettings PageSize="5"></GridPageSettings>
    <GridColumns>
        <GridColumn Field=@nameof(Data.Symbol) HeaderText="Symbol" Width="90"></GridColumn>
        <GridColumn Field=@nameof(Data.Name) HeaderText="Name" Width="90"></GridColumn>
        <GridColumn Field=@nameof(Data.Country) HeaderText="Country" Width="90"></GridColumn>
    </GridColumns>
</SfGrid>
@*<SfGrid DataSource="@Orders" AllowPaging="true">
 <GridPageSettings PageSize="5"></GridPageSettings>
   <GridColumns>
     <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
     <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" Width="150"></GridColumn>
     <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
     <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right" Width="120"></GridColumn>
   </GridColumns>
</SfGrid>*@

@code {
    public List<Order> Orders { get; set; } = new List<Order>();

    protected override void OnInitialized()
    {
        Orders.Add(new Order
            {
                OrderID = 1,
                CustomerID = "xD",
                OrderDate = DateTime.Now,
                Freight = 2.1
            });
        foreach (var item in Orders)
        {
            Console.WriteLine(item);
        }
    }

    public class Order
    {
        public int? OrderID { get; set; }
        public string CustomerID { get; set; }
        public DateTime? OrderDate { get; set; }
        public double? Freight { get; set; }
        public override string ToString()
        {
            return JsonConvert.SerializeObject(this);
        }
    }

    public string LocalStorageQueryKey { get; set; } = "Access Token";
    public string LocalStorageQueryValue { get; set; }
    public string Url { get; set; }
    public List<Data> DataSource { get; set; }
    public class Data
    {
        //public string Logo { get; set; }
        public string Symbol { get; set; }
        public string Name { get; set; }
        //public string Sector { get; set; }
        public string Country { get; set; }
        //public string Ceo { get; set; }
        public override string ToString()
        {
            return JsonConvert.SerializeObject(this);
        }
    }
    private async Task GetValueAsync()
    {
        var result = await ProtectedLocalStorage.GetAsync<string>(LocalStorageQueryKey);

        if (result.Success)
        {
            LocalStorageQueryValue = result.Value;
        }
        Console.WriteLine($"token: {LocalStorageQueryValue}");
        Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {LocalStorageQueryValue}");
        DataSource = await Http.GetFromJsonAsync<List<Data>>($"http://localhost:5158/api/stocks/watchlist?token={LocalStorageQueryValue}");
        foreach (var item in DataSource)
        {
            Console.WriteLine(item);
        }
        Http.DefaultRequestHeaders.Clear();
    } 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            Console.WriteLine("lolll");
            await GetValueAsync();
        
            StateHasChanged();    
        }
        
        //base.OnAfterRender(firstRender);
    }

}
