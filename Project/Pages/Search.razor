@page "/search"
@using DebounceThrottle
@using Newtonsoft.Json
@using Project.DTOs
@using Project.Services
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage


@inject HttpClient Http
@inject IConfiguration _configuration
@inject IStocksServices _stockServices;
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject NavigationManager NavigationManager
<h3>Search</h3>

<EditForm Model="@data" OnValidSubmit="@OnValidSearchSubmit">
    <DataAnnotationsValidator />
    <div>
        <label class="example-label">Select a company (Ticker symbol) </label>
        @*<label>
        Demonstration of equivalent HTML binding:
        <input value="@InputValue"
        @onchange="@((ChangeEventArgs __e) => InputValue = __e?.Value?.ToString())" />
        </label>*@
        <lable>
            @data.ticker
        </lable>
        <SfAutoComplete TValue="string" TItem="string" @oninput="@((ChangeEventArgs __e) => @GetAutoComlleteListAsync(__e))"
                        @bind-Value="data.ticker" Placeholder="e.g. TSLA" DataSource="@resultList">
            <AutoCompleteFieldSettings Value="ticker"></AutoCompleteFieldSettings>
        </SfAutoComplete>
        <ValidationMessage For="()=>data.ticker" />
    </div>
    <div class="submit-btn">
        <div class="rounded-2">
            <SfButton style="width:100px; height:35px;-webkit-text-fill-color:white; border-color:rebeccapurple; background-color:rebeccapurple"
                      type="submit" IsPrimary="true">Submit</SfButton>
        </div>
    </div>
</EditForm>
<div class="rounded-2">
        <SfButton style="width:100px; height:35px;-webkit-text-fill-color:white; border-color:rebeccapurple; background-color:rebeccapurple"
                  IsPrimary="true" @onclick="@AddToWatchlist">+</SfButton>
</div>
<div class="rounded-2">
        <SfButton style="width:100px; height:35px; position:relative; top:-35px; left:105px; -webkit-text-fill-color:white; border-color:rebeccapurple; background-color:rebeccapurple"
                  IsPrimary="true" @onclick="@NavigateToWatchlistPage">Watchlist</SfButton>
</div>

@if (@ChartShown)
{
    <div class="control-section">
        <div>
            <SfStockChart EnableSelector="false">
                <StockChartPeriods>
                    <StockChartPeriod IntervalType=RangeIntervalType.Days Interval="1" Text='1 Day' Selected="true"></StockChartPeriod>
                    <StockChartPeriod IntervalType=RangeIntervalType.Weeks Interval="1" Text='1 Week'></StockChartPeriod>
                    <StockChartPeriod IntervalType=RangeIntervalType.Days Interval="1" Text='1 Month'></StockChartPeriod>
                    <StockChartPeriod IntervalType=RangeIntervalType.Months Interval="3" Text='3 Months'></StockChartPeriod>
                </StockChartPeriods>
                <StockChartPrimaryXAxis>
                </StockChartPrimaryXAxis>
                <StockChartSeriesCollection>
                    <StockChartSeries DataSource="@DataSource" Type="ChartSeriesType.HiloOpenClose" XName="Date" High="High" Low="Low" Open="Open" Close="Close" Volume="Volume"></StockChartSeries>
                </StockChartSeriesCollection>
            </SfStockChart>
        </div>
    </div>
}
<style>
    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }

    .submit-btn {
        display: flex;
        justify-content: center;
        padding: 20px 0px 0px;
    }

    .validation-message {
        color: red;
        padding: 5px 0px 0px;
    }
</style>

@*<SfAutoComplete TValue="string" TItem="EmployeeData" Placeholder="Select a Employee" Query="@RemoteDataQuery">
    <SfDataManager Url="https://ej2services.syncfusion.com/production/web-services/api/Employees" Offline=true Adaptor="Adaptors.WebApiAdaptor" CrossDomain=true></SfDataManager>
    <AutoCompleteFieldSettings Value="FirstName"></AutoCompleteFieldSettings>
</SfAutoComplete>*@
@*<SfAutoComplete TValue="string" TItem="Data" Placeholder="e.g. TSLA" Query="@RemoteDataQuery" Autofill="true">
    <SfDataManager Url="@Url" CrossDomain="true" Adaptor="Adaptors.WebApiAdaptor"></SfDataManager>
    <AutoCompleteFieldSettings Value="ticker" />
</SfAutoComplete>*@

@code {
    //public Query RemoteDataQuery = new Query().Select(new List<string> { "ticker" }).Take(6).RequiresCount();
    //public tickers = res.results.Select(x => x.ticker).toList();
    //public Query Query = new Query().Select(new List<string> { "FirstName" }).Take(6).RequiresCount();
    //public string Url = $"https://api.polygon.io/v3/reference/tickers?search={InputValue}&active=true&sort=ticker&order=asc&limit=100";
    private bool ChartShown { get; set; } = false;
    private string? InputValue { get; set; }
    //private string? SearchResult { get; set; }
    private DebounceDispatcher debounceDispatcher { get; set; } = new DebounceDispatcher(2000);
    public string LocalStorageQueryKey { get; set; } = "Access Token";
    public string LocalStorageQueryValue { get; set; }
    public class Data
    {
        [Required(ErrorMessage = "The Ticker Name field is required.")]
        public string ticker;
    }

    public Data data = new Data();
    public List<string> resultList = new List<string>();
    public List<string> tickerList = new List<string>();
    private void ToggleChart()
    {
        ChartShown = !ChartShown;
    }

    private async Task GetValueAsync()
    {
        var result = await ProtectedLocalStorage.GetAsync<string>(LocalStorageQueryKey);

        if (result.Success)
        {
            LocalStorageQueryValue = result.Value;
        }
    }

    public async Task GetAutoComlleteListAsync(ChangeEventArgs __e)
    {
        await debounceDispatcher.DebounceAsync(async () =>
        {
            InputValue = __e?.Value?.ToString();
            string url = $"https://api.polygon.io/v3/reference/tickers?search={InputValue}&active=true&sort=ticker&order=asc&limit=100";
            Console.WriteLine(url);
            if (InputValue == null)
            {
                url = $"https://api.polygon.io/v3/reference/tickers?&active=true&sort=ticker&order=asc&limit=100";
            }
            resultList = await _stockServices.GetCompaniesAsync(url);
        //tickerList.AddRange(resultList.Except(tickerList));
            tickerList = resultList;
        });
        return;
    }

    private async void OnValidSearchSubmit()
    {
        //SearchResult = InputValue;
        await ChartInitialize();
        ToggleChart();
        Console.WriteLine("Valid");
    }
    // Chart
    private List<StockChartData> DataSource;
    public class StockChartData
    {
        public DateTime Date { get; set; }
        public Double Open { get; set; }
        public Double Low { get; set; }
        public Double Close { get; set; }
        public Double High { get; set; }
        public Double Volume { get; set; }
        public override string ToString()
        {
            return JsonConvert.SerializeObject(this);
        }
    }

    private async Task ChartInitialize()
    {
        Console.WriteLine(data.ticker);
        Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {LocalStorageQueryValue}");
        DataSource = await Http.GetFromJsonAsync<List<StockChartData>>($"http://localhost:5158/api/stocks/timeSpan?symbol={data.ticker.ToUpper()}");
        Console.WriteLine("Start:");
        if (DataSource != null)
        {
            //foreach (var item in DataSource)
            //{
            //    Console.WriteLine(item);
            //}
        }
        else
        {
            Console.WriteLine("null");
        }
        Http.DefaultRequestHeaders.Clear();
    }
    private async void AddToWatchlist()
    {
        await GetValueAsync();
        string userToken = LocalStorageQueryValue;
        //Console.WriteLine($"token: {userToken}");
        await _stockServices.AddToWatchlist(data.ticker, userToken);
        Console.WriteLine("Added");
    }
    private void NavigateToWatchlistPage()
    {
        NavigationManager.NavigateTo("http://localhost:5158/watchlist", true);
    }
}